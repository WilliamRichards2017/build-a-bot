{"remainingRequest":"/Users/Trill/Projects/build-a-bot/node_modules/babel-loader/lib/index.js!/Users/Trill/Projects/build-a-bot/src/store/modules/robots.js","dependencies":[{"path":"/Users/Trill/Projects/build-a-bot/src/store/modules/robots.js","mtime":1609985852221},{"path":"/Users/Trill/Projects/build-a-bot/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Trill/Projects/build-a-bot/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICIvVXNlcnMvVHJpbGwvUHJvamVjdHMvYnVpbGQtYS1ib3Qvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5IjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWVzcGFjZWQ6IHRydWUsCiAgc3RhdGU6IHsKICAgIGNhcnQ6IFtdLAogICAgcGFydHM6IG51bGwKICB9LAogIG11dGF0aW9uczogewogICAgYWRkUm9ib3RUb0NhcnQ6IGZ1bmN0aW9uIGFkZFJvYm90VG9DYXJ0KHN0YXRlLCByb2JvdCkgewogICAgICBzdGF0ZS5jYXJ0LnB1c2gocm9ib3QpOwogICAgfSwKICAgIHVwZGF0ZVBhcnRzOiBmdW5jdGlvbiB1cGRhdGVQYXJ0cyhzdGF0ZSwgcGFydHMpIHsKICAgICAgc3RhdGUucGFydHMgPSBwYXJ0czsKICAgIH0KICB9LAogIGdldHRlcnM6IHsKICAgIGNhcnRTYWxlSXRlbXM6IGZ1bmN0aW9uIGNhcnRTYWxlSXRlbXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmNhcnQuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0uaGVhZC5vblNhbGU7CiAgICAgIH0pOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgZ2V0UGFydHM6IGZ1bmN0aW9uIGdldFBhcnRzKF9yZWYpIHsKICAgICAgdmFyIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICBheGlvcy5nZXQoJ2FwaS9wYXJ0cycpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICAgIHJldHVybiBjb21taXQoJ3VwZGF0ZVBhcnRzJywgcmVzdWx0LmRhdGEpOwogICAgICB9KS5jYXRjaChjb25zb2xlLmVycm9yKTsKICAgIH0sCiAgICBhZGRSb2JvdFRvQ2FydDogZnVuY3Rpb24gYWRkUm9ib3RUb0NhcnQoX3JlZjIsIHJvYm90KSB7CiAgICAgIHZhciBjb21taXQgPSBfcmVmMi5jb21taXQsCiAgICAgICAgICBzdGF0ZSA9IF9yZWYyLnN0YXRlOwogICAgICB2YXIgY2FydCA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoc3RhdGUuY2FydCksIFtyb2JvdF0pOwogICAgICByZXR1cm4gYXhpb3MucG9zdCgnYXBpL2NhcnQnLCBjYXJ0KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gY29tbWl0KCdhZGRSb2JvdFRvQ2FydCcsIHJvYm90KTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/Users/Trill/Projects/build-a-bot/src/store/modules/robots.js"],"names":["axios","namespaced","state","cart","parts","mutations","addRobotToCart","robot","push","updateParts","getters","cartSaleItems","filter","item","head","onSale","actions","getParts","commit","get","then","result","data","catch","console","error","post"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAEbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,EADD;AAELC,IAAAA,KAAK,EAAE;AAFF,GAFM;AAMbC,EAAAA,SAAS,EAAE;AACTC,IAAAA,cADS,0BACMJ,KADN,EACaK,KADb,EACoB;AAC3BL,MAAAA,KAAK,CAACC,IAAN,CAAWK,IAAX,CAAgBD,KAAhB;AACD,KAHQ;AAITE,IAAAA,WAJS,uBAIGP,KAJH,EAIUE,KAJV,EAIiB;AACxBF,MAAAA,KAAK,CAACE,KAAN,GAAcA,KAAd;AACD;AANQ,GANE;AAcbM,EAAAA,OAAO,EAAE;AACPC,IAAAA,aADO,yBACOT,KADP,EACc;AACnB,aAAOA,KAAK,CAACC,IAAN,CAAWS,MAAX,CAAkB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,IAAL,CAAUC,MAApB;AAAA,OAAlB,CAAP;AACD;AAHM,GAdI;AAmBbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QADO,0BACc;AAAA,UAAVC,MAAU,QAAVA,MAAU;AACnBlB,MAAAA,KAAK,CAACmB,GAAN,CAAU,WAAV,EACGC,IADH,CACQ,UAACC,MAAD;AAAA,eAAYH,MAAM,CAAC,aAAD,EAAgBG,MAAM,CAACC,IAAvB,CAAlB;AAAA,OADR,EAEGC,KAFH,CAESC,OAAO,CAACC,KAFjB;AAGD,KALM;AAMPnB,IAAAA,cANO,iCAM2BC,KAN3B,EAMkC;AAAA,UAAxBW,MAAwB,SAAxBA,MAAwB;AAAA,UAAhBhB,KAAgB,SAAhBA,KAAgB;AACvC,UAAMC,IAAI,gCAAOD,KAAK,CAACC,IAAb,IAAmBI,KAAnB,EAAV;AACA,aAAOP,KAAK,CAAC0B,IAAN,CAAW,UAAX,EAAuBvB,IAAvB,EACJiB,IADI,CACC;AAAA,eAAMF,MAAM,CAAC,gBAAD,EAAmBX,KAAnB,CAAZ;AAAA,OADD,CAAP;AAED;AAVM;AAnBI,CAAf","sourcesContent":["import axios from 'axios';\n\nexport default {\n  namespaced: true,\n  state: {\n    cart: [],\n    parts: null,\n  },\n  mutations: {\n    addRobotToCart(state, robot) {\n      state.cart.push(robot);\n    },\n    updateParts(state, parts) {\n      state.parts = parts;\n    },\n  },\n  getters: {\n    cartSaleItems(state) {\n      return state.cart.filter((item) => item.head.onSale);\n    },\n  },\n  actions: {\n    getParts({ commit }) {\n      axios.get('api/parts')\n        .then((result) => commit('updateParts', result.data))\n        .catch(console.error);\n    },\n    addRobotToCart({ commit, state }, robot) {\n      const cart = [...state.cart, robot];\n      return axios.post('api/cart', cart)\n        .then(() => commit('addRobotToCart', robot));\n    },\n  },\n};\n"]}]}